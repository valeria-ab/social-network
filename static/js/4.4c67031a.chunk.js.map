{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","styles","dialog","name","Message","message","maxLength10","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","Dialogs","dialogs","dialogsItems","dialogsPage","dialogsData","map","el","messages","messagesData","values","sendMessage","newMessageBody","DialogsContainer","compose"],"mappings":"yHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,OAAS,wBAAwB,QAAU,2B,oHCQvKC,EAA6B,SAACC,GAAD,MAA0D,CAC9FC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAqBC,GAcjC,OAFqCC,YAAQN,EAARM,EAVrC,SAA2BC,GAEMA,EAAxBL,OAF0D,IAE/CM,EAF8C,YAEjCD,EAFiC,YAI9D,OAAKA,EAAML,OAGJ,cAACG,EAAD,eAAiBG,IAFb,cAAC,IAAD,CAAUC,GAAI,gB,kFCAlBC,MAVd,SAAoBH,GACjB,IAAII,EAAO,YAAcJ,EAAMK,GAE/B,OACI,qBAAKC,UAAWC,IAAOC,OAAvB,SACI,cAAC,IAAD,CAASN,GAAIE,EAAb,SAAoBJ,EAAMS,UCGvBC,MATf,SAAkBV,GACd,OACI,qBAAKM,UAAWC,IAAOI,QAAvB,SACI,+BAAOX,EAAMW,a,iCCKnBC,EAAcC,YAAiB,IA0CrC,IAcMC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAdsC,SAACf,GAC/D,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXZ,KAAM,iBACNa,SAAU,CAACC,IAAeX,GAC1BY,YAAa,0BACpB,gDASGC,EAxDf,SAAiBzB,GAMb,OACI,sBAAKM,UAAWC,IAAOmB,QAAvB,UAEI,qBAAKpB,UAAWC,IAAOoB,aAAvB,SAEQ3B,EAAM4B,YAAYC,YAAYC,KAC1B,SAAAC,GAAE,OAAI,cAAC,EAAD,CAEFtB,KAAMsB,EAAGtB,KACTJ,GAAI0B,EAAG1B,IAFF0B,EAAG1B,SASxB,qBAAKC,UAAWC,IAAOyB,SAAvB,SAEQhC,EAAM4B,YAAYK,aAAaH,KAC3B,SAAAC,GAAE,OAAI,cAAC,EAAD,CACFpB,QAASoB,EAAGpB,eAK5B,cAACG,EAAD,CAAqBG,SA7BP,SAACiB,GACnBlC,EAAMmC,YAAYD,EAAOE,uB,iCCc1BC,EAAmBC,YACtBvC,aAjBoB,SAACL,GACrB,MAAO,CACHkC,YAAalC,EAAMkC,eAeC,CACpBO,kBACJtC,IAHsByC,CAIxBb,GAEaY","file":"static/js/4.4c67031a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1g61Q\",\"dialogsItems\":\"Dialogs_dialogsItems__2vjpz\",\"messages\":\"Dialogs_messages__3ayvm\",\"dialog\":\"Dialogs_dialog__2pSY9\",\"message\":\"Dialogs_message__2V_Uw\"};","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport let mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: MapStateToPropsForRedirectType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return <Component   {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import styles from '../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n function DialogItem(props: DialogItemPropsType) {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={styles.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport styles from './../Dialogs.module.css';\r\n\r\n\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nfunction Message (props:MessagePropsType) {\r\n    return (\r\n        <div className={styles.message}>\r\n            <span>{props.message}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport styles from '../Dialogs/Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    updateNewMessageBody: (messageBody: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n\r\n    const addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n\r\n            <div className={styles.dialogsItems}>\r\n                {\r\n                    props.dialogsPage.dialogsData.map(\r\n                        el => <DialogItem\r\n                            key={el.id}\r\n                            name={el.name}\r\n                            id={el.id}\r\n                        />\r\n                    )}\r\n\r\n            </div>\r\n\r\n\r\n            <div className={styles.messages}>\r\n                {\r\n                    props.dialogsPage.messagesData.map(\r\n                        el => <Message\r\n                            message={el.message}\r\n                        />\r\n                    )}\r\n            </div>\r\n\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name={\"newMessageBody\"}\r\n                   validate={[requiredField, maxLength10]}\r\n                   placeholder={\"Enter your message...\"}/>\r\n            <button>Send</button>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {\r\n    DialogsPageType, sendMessage\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {StatePropsType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n\r\n}\r\n\r\nconst mapStateToProps = (state:StatePropsType):MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n/*const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\nexport const DialogsContainer = connect(mapStateToProps,{\r\n    updateNewMessageBody,\r\n    sendMessage\r\n})(AuthRedirectComponent)*/\r\n\r\n\r\n\r\n\r\n const DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps,{\r\n        sendMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer;"],"sourceRoot":""}